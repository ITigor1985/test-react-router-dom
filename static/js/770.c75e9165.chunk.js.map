{"version":3,"file":"static/js/770.c75e9165.chunk.js","mappings":"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","sources":["components/MovieDetailsPage/MovieDetailsPage.styled.jsx","components/MovieDetailsPage/MovieDetailsPage.jsx","services/publicationsApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  & > :not(:last-child) {\n    margin-right: 10px;\n  }\n`;\n\nexport const ListLink = styled.ul`\n  display: flex;\n  liststyletype: none;\n  & > :not(:last-child) {\n    margin-right: 20px;\n  }\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\nexport const DidescriptionWrapper = styled.div`\n  width: 650px;\n`;\n\nexport const MovieTitle = styled.h2`\n  margin-bottom: 15px;\n`;\n\nexport const MovieUserScore = styled.p`\n  margin-bottom: 15px;\n`;\nexport const MovieOverview = styled.h3`\n  margin-bottom: 15px;\n`;\n","import { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieDetails } from 'services/publicationsApi.js';\nimport {\n  List,\n  ListLink,\n  InfoWrapper,\n  DidescriptionWrapper,\n  MovieTitle,\n  MovieUserScore,\n  MovieOverview,\n} from './MovieDetailsPage.styled';\nimport CustomLink from 'components/CustomLink/CustomLink';\n\nexport default function MovieDetailsPage() {\n  let { movieId } = useParams();\n  let location = useLocation();\n  const [filmData, setFilmData] = useState({});\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    async function getMoviesData() {\n      try {\n        const {\n          id,\n          original_title,\n          overview,\n          backdrop_path,\n          genres,\n          vote_average,\n          release_date,\n        } = await getMovieDetails(movieId);\n\n        setFilmData({\n          id,\n          original_title,\n          overview,\n          backdrop_path,\n          genres,\n          vote_average,\n          release_date,\n        });\n      } catch (error) {\n        setError(error.message);\n      }\n    }\n    getMoviesData();\n  }, [movieId]);\n\n  return (\n    <>\n      <CustomLink to={location?.state?.from ?? '/'}>Go Back</CustomLink>\n      {error && <h2>Something went wrong, please try again</h2>}\n      <InfoWrapper>\n        {(filmData.backdrop_path && (\n          <img\n            src={`https://image.tmdb.org/t/p/w500${filmData.backdrop_path}`}\n            alt={`${filmData.original_title}`}\n          />\n        )) || (\n          <img\n            src={`https://www.salonlfc.com/wp-content/uploads/2018/01/image-not-found-1-scaled-1150x647.png`}\n            alt={`${filmData.original_title}`}\n            width=\"500\"\n            height=\"281\"\n          />\n        )}\n\n        <DidescriptionWrapper>\n          <MovieTitle>\n            {filmData.original_title}(\n            {filmData.release_date && filmData.release_date.slice(0, 4)})\n          </MovieTitle>\n          <MovieUserScore>\n            User score: {filmData.vote_average * 10}%\n          </MovieUserScore>\n          <h3>Genres</h3>\n          {filmData.genres && (\n            <List>\n              {filmData.genres.map(genre => {\n                return <li key={genre.id}>{genre.name}</li>;\n              })}\n            </List>\n          )}\n          <MovieOverview>Overview</MovieOverview>\n          <p>{filmData.overview}</p>\n        </DidescriptionWrapper>\n      </InfoWrapper>\n\n      <ListLink>\n        <li>\n          <CustomLink\n            to={`/movies/${movieId}/cast`}\n            state={{ from: location?.state?.from }}\n          >\n            Cast\n          </CustomLink>\n        </li>\n        <li>\n          <CustomLink\n            to={`/movies/${movieId}/reviews`}\n            state={{ from: location?.state?.from }}\n          >\n            Reviews\n          </CustomLink>\n        </li>\n      </ListLink>\n      <Outlet />\n    </>\n  );\n}\n","import axios from 'axios';\nconst key = '051044c279aad319532da903b2292510';\n\nexport const getTrending = async () => {\n  axios.defaults.baseURL = `https://api.themoviedb.org/3/trending/movie/day?api_key=${key}`;\n  const response = await axios.get(`${axios.defaults.baseURL}`);\n  return response.data;\n};\nexport const getSearch = async query => {\n  axios.defaults.baseURL = `https://api.themoviedb.org/3/search/movie?api_key=${key}&query=${query}&page=1&language=en-US`;\n  const response = await axios.get(`${axios.defaults.baseURL}`);\n  return response.data;\n};\nexport const getMovieDetails = async movie_id => {\n  axios.defaults.baseURL = `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${key}&language=en-US`;\n  const response = await axios.get(`${axios.defaults.baseURL}`);\n  return response.data;\n};\nexport const getMovieCast = async movie_id => {\n  axios.defaults.baseURL = `https://api.themoviedb.org/3/movie/${movie_id}/credits?api_key=${key}&language=en-US`;\n  const response = await axios.get(`${axios.defaults.baseURL}`);\n  return response.data;\n};\nexport const getMovieReviews = async movie_id => {\n  axios.defaults.baseURL = `https://api.themoviedb.org/3/movie/${movie_id}/reviews?api_key=${key}&language=en-US`;\n  const response = await axios.get(`${axios.defaults.baseURL}`);\n  return response.data;\n};\n"],"names":["List","styled","ListLink","InfoWrapper","DidescriptionWrapper","MovieTitle","MovieUserScore","MovieOverview","MovieDetailsPage","movieId","useParams","location","useLocation","useState","filmData","setFilmData","error","setError","useEffect","getMovieDetails","id","original_title","overview","backdrop_path","genres","vote_average","release_date","message","getMoviesData","CustomLink","to","state","from","src","alt","width","height","slice","map","genre","name","key","getTrending","axios","response","data","getSearch","query","movie_id","getMovieCast","getMovieReviews"],"sourceRoot":""}